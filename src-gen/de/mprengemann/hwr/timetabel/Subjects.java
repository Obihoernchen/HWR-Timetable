package de.mprengemann.hwr.timetabel;

import java.util.List;
import de.mprengemann.hwr.timetabel.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table SUBJECTS.
 */
public class Subjects {

    private Long id;
    /** Not-null value. */
    private String title;
    /** Not-null value. */
    private String shortTitle;
    private Boolean show;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient SubjectsDao myDao;

    private List<Events> events;

    public Subjects() {
    }

    public Subjects(Long id) {
        this.id = id;
    }

    public Subjects(Long id, String title, String shortTitle, Boolean show) {
        this.id = id;
        this.title = title;
        this.shortTitle = shortTitle;
        this.show = show;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getSubjectsDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getTitle() {
        return title;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setTitle(String title) {
        this.title = title;
    }

    /** Not-null value. */
    public String getShortTitle() {
        return shortTitle;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setShortTitle(String shortTitle) {
        this.shortTitle = shortTitle;
    }

    public Boolean getShow() {
        return show;
    }

    public void setShow(Boolean show) {
        this.show = show;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public synchronized List<Events> getEvents() {
        if (events == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            EventsDao targetDao = daoSession.getEventsDao();
            events = targetDao._querySubjects_Events(id);
        }
        return events;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetEvents() {
        events = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }
    
    // KEEP METHODS - put your custom methods here
   	@Override
   	public boolean equals(Object o) {
   		if (o instanceof Subjects){
   			if (((Subjects) o).getTitle().equals(getTitle())){
   				return true;
   			}else{
   				return false;
   			}
   		}
   		
   		return false;
   	}
    // KEEP METHODS END
}
